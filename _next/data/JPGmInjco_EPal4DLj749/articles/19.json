{"pageProps":{"issue":{"body":"Aptosにおける，アカウント作成時の暗号化手順\r\n\r\n0. ユーザーがアカウント作成要求を送信\r\n1. 秘密鍵と公開鍵のキーペアの生成\r\n2. ユーザーから，そのアカウントに適した署名方式を取得\r\n    - 単一署名方式 or マルチシグ方式\r\n3. 公開鍵とユーザーの署名方式を組み合わせ，32バイトの認証鍵を生成する\r\n4. 認証鍵とシーケンス番号（初期値0）の両方が，初期アカウントリソースとしてアカウントに保存される\r\n5. 認証鍵から32バイトのアカウントアドレスを生成\r\n\r\nシーケンス番号は，そのアカウントから送信されたトランザクション数を示す．トランザクションにはシーケンス番号を含み，トランザクションを処理する際に，トランザクションに含まれるシーケンス番号とアカウントが保持するシーケンス番号を比較し，一致する場合のみ実行に移す．これはリプレイ攻撃を防ぐためのもので，Ethereum だと nonce にあたる．\r\n\r\nアカウントアドレスは，アカウントの識別子として重要なリソースであるが，アカウント生成時に導出される32バイトの認証鍵がそのままアカウントアドレスになる（例：`eeff357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b``）．\r\n秘密鍵と公開鍵をのちに更新でき，その場合は認証鍵も変更される．しかし，アカウントアドレスは永続的（不変）であり，認証鍵とアカウントアドレスが一致するのは，初期のみで必ずしも一致しないし，既存のアカウントアドレスが変更されることはない．\r\n\r\nAptos の署名方式には2つある．\r\n1. 単一署名方式\r\n2. マルチシグ方式\r\n\r\nそれぞれの署名方式は以下の署名スキームを用いる\r\n1. Ed25519\r\n4. MultiEd25519\r\n\r\nまた，アカウントの認証鍵を生成するには，そのアカウントについて1バイトの署名方式の識別子の指定が必要で，それぞれ以下のように識別子が定められている．\r\n1. 単一署名方式： `0x00`\r\n2. マルチシグ方式：`0x01`\r\n\r\nそれぞれの署名方式によるアカウントの生成手順は以下である．\r\n- 単一署名方式\r\n  1. キーペア（公開鍵，秘密鍵）の生成\r\n     - RFC 8032 で定義された Ed25519 curve 上の PureEdDSA スキームを使用\r\n  3. 公開鍵から，32バイトの認証鍵を導出\r\n      - `auth_key = sha3-256(publicke | 0x00)`\r\n  5. （永続的な）アカウントアドレスとして，2で導出した初期認証鍵を設定\r\n\r\n- マルチシグ方式\r\n  - K-of-Nマルチシグ認証を用いるため，定数 N, K を指定する必要がある\r\n  - K-of-Nマルチシグ認証では，アカウントに合計 N 人の署名者が存在し，N 人の署名のうち少なくとも K 人がトランザクションを認証するためにしようされなければならない\r\n  1. キーペア（公開鍵，秘密鍵）の生成\r\n      - N個のEd25519 公開鍵 p_1, ..., p_n を生成\r\n  3. トランザクションの認証に必要な署名の閾値である`K`の値を決定\r\n  4. 公開鍵と`K`から，32バイトの認証鍵を同種\r\n      - `auth_key = sha3-256(p_1 | ... | p_n | K | 0x01)`\r\n  6. （永続的な）アカウントアドレスとして，3で導出した初期認証鍵を設定\r\n","bodyHTML":"<p>Aptosにおける，アカウント作成時の暗号化手順</p>\n<ol start=\"0\">\n<li>ユーザーがアカウント作成要求を送信</li>\n<li>秘密鍵と公開鍵のキーペアの生成</li>\n<li>ユーザーから，そのアカウントに適した署名方式を取得\n<ul>\n<li>単一署名方式 or マルチシグ方式</li>\n</ul>\n</li>\n<li>公開鍵とユーザーの署名方式を組み合わせ，32バイトの認証鍵を生成する</li>\n<li>認証鍵とシーケンス番号（初期値0）の両方が，初期アカウントリソースとしてアカウントに保存される</li>\n<li>認証鍵から32バイトのアカウントアドレスを生成</li>\n</ol>\n<p>シーケンス番号は，そのアカウントから送信されたトランザクション数を示す．トランザクションにはシーケンス番号を含み，トランザクションを処理する際に，トランザクションに含まれるシーケンス番号とアカウントが保持するシーケンス番号を比較し，一致する場合のみ実行に移す．これはリプレイ攻撃を防ぐためのもので，Ethereum だと nonce にあたる．</p>\n<p>アカウントアドレスは，アカウントの識別子として重要なリソースであるが，アカウント生成時に導出される32バイトの認証鍵がそのままアカウントアドレスになる（例：`eeff357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b``）．\r\n秘密鍵と公開鍵をのちに更新でき，その場合は認証鍵も変更される．しかし，アカウントアドレスは永続的（不変）であり，認証鍵とアカウントアドレスが一致するのは，初期のみで必ずしも一致しないし，既存のアカウントアドレスが変更されることはない．</p>\n<p>Aptos の署名方式には2つある．</p>\n<ol>\n<li>単一署名方式</li>\n<li>マルチシグ方式</li>\n</ol>\n<p>それぞれの署名方式は以下の署名スキームを用いる</p>\n<ol>\n<li><a href=\"https://github.com/ma96o/gialog/commit/Ed25519\"><code>Ed25519</code></a></li>\n<li>MultiEd25519</li>\n</ol>\n<p>また，アカウントの認証鍵を生成するには，そのアカウントについて1バイトの署名方式の識別子の指定が必要で，それぞれ以下のように識別子が定められている．</p>\n<ol>\n<li>単一署名方式： <code>0x00</code></li>\n<li>マルチシグ方式：<code>0x01</code></li>\n</ol>\n<p>それぞれの署名方式によるアカウントの生成手順は以下である．</p>\n<ul>\n<li>\n<p>単一署名方式</p>\n<ol>\n<li>キーペア（公開鍵，秘密鍵）の生成\n<ul>\n<li>RFC 8032 で定義された <a href=\"https://github.com/ma96o/gialog/commit/Ed25519\"><code>Ed25519</code></a> curve 上の PureEdDSA スキームを使用</li>\n</ul>\n</li>\n<li>公開鍵から，32バイトの認証鍵を導出\n<ul>\n<li><code>auth_key = sha3-256(publicke | 0x00)</code></li>\n</ul>\n</li>\n<li>（永続的な）アカウントアドレスとして，2で導出した初期認証鍵を設定</li>\n</ol>\n</li>\n<li>\n<p>マルチシグ方式</p>\n<ul>\n<li>K-of-Nマルチシグ認証を用いるため，定数 N, K を指定する必要がある</li>\n<li>K-of-Nマルチシグ認証では，アカウントに合計 N 人の署名者が存在し，N 人の署名のうち少なくとも K 人がトランザクションを認証するためにしようされなければならない</li>\n</ul>\n<ol>\n<li>キーペア（公開鍵，秘密鍵）の生成\n<ul>\n<li>N個のEd25519 公開鍵 p_1, ..., p_n を生成</li>\n</ul>\n</li>\n<li>トランザクションの認証に必要な署名の閾値である<code>K</code>の値を決定</li>\n<li>公開鍵と<code>K</code>から，32バイトの認証鍵を同種\n<ul>\n<li><code>auth_key = sha3-256(p_1 | ... | p_n | K | 0x01)</code></li>\n</ul>\n</li>\n<li>（永続的な）アカウントアドレスとして，3で導出した初期認証鍵を設定</li>\n</ol>\n</li>\n</ul>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/ma96o/gialog/issues/19/comments","created_at":"2022-08-20T13:14:11Z","events_url":"https://api.github.com/repos/ma96o/gialog/issues/19/events","html_url":"https://github.com/ma96o/gialog/issues/19","id":1345162605,"labels":[],"labels_url":"https://api.github.com/repos/ma96o/gialog/issues/19/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHueoCs5QLY1t","number":19,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/ma96o/gialog/issues/19/reactions"},"repository_url":"https://api.github.com/repos/ma96o/gialog","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/ma96o/gialog/issues/19/timeline","title":"0820 _ Aptos のアカウント生成","updated_at":"2022-08-20T13:14:11Z","url":"https://api.github.com/repos/ma96o/gialog/issues/19","user":{"avatar_url":"https://avatars.githubusercontent.com/u/22464192?v=4","events_url":"https://api.github.com/users/ma96o/events{/privacy}","followers_url":"https://api.github.com/users/ma96o/followers","following_url":"https://api.github.com/users/ma96o/following{/other_user}","gists_url":"https://api.github.com/users/ma96o/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/ma96o","id":22464192,"login":"ma96o","node_id":"MDQ6VXNlcjIyNDY0MTky","organizations_url":"https://api.github.com/users/ma96o/orgs","received_events_url":"https://api.github.com/users/ma96o/received_events","repos_url":"https://api.github.com/users/ma96o/repos","site_admin":false,"starred_url":"https://api.github.com/users/ma96o/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ma96o/subscriptions","type":"User","url":"https://api.github.com/users/ma96o"}},"issueComments":[]},"__N_SSG":true}